-- SAMPLE CALL SYNTAX
local utility = require "utility"

local anyVariable = utility.myAwesomeFunction1()
local myVariable1 = utility.getMyVariable1()

from: https://medium.com/hackthecode/make-a-common-utility-file-in-lua-corona-sdk-2ca4e9bce915 


-- TO ACCESS OTHER VARIABLES IN LUA FILES, SIMPLY MAKE THEM GLOBAL

from: https://stackoverflow.com/questions/10593464/how-to-pass-and-receive-value-in-lua-to-another-lua 

-- MANY TO ONE RELATIONSHIP FOR SQLITE

 CREATE TABLE IF NOT EXISTS families (
                     id INTEGER PRIMARY KEY,
                     reference VARCHAR(32) NOT NULL,
                     name TEXT NOT NULL,
                     unite VARCHAR);

CREATE TABLE IF NOT EXISTS  articles (
                        id INTEGER PRIMARY KEY,
                        reference VARCHAR(32) NOT NULL,
                        name TEXT NOT NULL,
                        quantity REAL,
                        unite VARCHAR,
                        purchased INTEGER,
                        reserved INTEGER,
                        sold INTEGER,
                        available INTEGER,
                        minimum INTEGER,
                        family_id INTEGER,
                        FOREIGN KEY(family_id) REFERENCES families(id)
);

-- ONE TO ONE RELATIONSHIP 
CREATE TABLE IF NOT EXISTS families (
                     id INTEGER PRIMARY KEY,
                     reference VARCHAR(32) NOT NULL,
                     name TEXT NOT NULL,
                     unite VARCHAR,
                     article_id INTEGER,
                     FOREIGN KEY(article_id) REFERENCES articles(id)
);

CREATE TABLE IF NOT EXISTS  articles (
                        id INTEGER PRIMARY KEY,
                        reference VARCHAR(32) NOT NULL,
                        name TEXT NOT NULL,
                        quantity REAL,
                        unite VARCHAR,
                        purchased INTEGER,
                        reserved INTEGER,
                        sold INTEGER,
                        available INTEGER,
                        minimum INTEGER,
                        family_id INTEGER,
                        FOREIGN KEY(family_id) REFERENCES families(id)
);

-- MANY TO MANY RELATIONSHIP
CREATE TABLE IF NOT EXISTS families (
                     id INTEGER PRIMARY KEY,
                     reference VARCHAR(32) NOT NULL,
                     name TEXT NOT NULL,
                     unite VARCHAR,
);

CREATE TABLE IF NOT EXISTS  articles (
                        id INTEGER PRIMARY KEY,
                        reference VARCHAR(32) NOT NULL,
                        name TEXT NOT NULL,
                        quantity REAL,
                        unite VARCHAR,
                        purchased INTEGER,
                        reserved INTEGER,
                        sold INTEGER,
                        available INTEGER,
                        minimum INTEGER,
);

CREATE TABLE IF NOT EXISTS articles_families (
                        article_id INTEGER,
                        family_id INTEGER,
                        FOREIGN KEY(article_id) REFERENCES articles(id),
                        FOREIGN KEY(family_id) REFERENCES families(id)

);

from: https://www.techiediaries.com/sqlite-create-table-foreign-key-relationships/

-- Database Syntax REFERENCES

-- Initialize table if not created
local tableSetup = [[CREATE TABLE IF NOT EXISTS People ( UserID INTEGER PRIMARY KEY autoincrement,
																					  FirstName,
																					  LastName, 
																					  Gender, 
																					  Sex, 
																					  Birthdate, 
																					  Hobby, 
																					  Email, 
																					  PersonType, 
																					  Username, 
																					  Password);]]
db:exec( tableSetup )

-- Add data to the table
local people = {
    {
        FirstName = "John",
		LastName = "Smith",
		Gender = "Straight",
		Sex  = "Male",
		Birthdate = "12/03/1990",
		Hobby = "Hiking",
		Email = "jsmith@gmail.com",
		PersonType = "Extrovert",
		Username = "jsmith",
		Password = "jsmith4ever"
    },
}

for i = 1,#people do
	local q = [[INSERT INTO People VALUES ( NULL, "]] .. people[i].FirstName .. [[","]] 
													 .. people[i].LastName .. [[","]] 
													 .. people[i].Gender .. [[","]] 
													 .. people[i].Sex .. [[","]] 
													 .. people[i].Birthdate .. [[","]] 
													 .. people[i].Hobby .. [[","]] 
													 .. people[i].Email .. [[","]] 
													 .. people[i].PersonType .. [[","]]
													 .. people[i].Username .. [[","]]
													 .. people[i].Password .. [[" );]]
    db:exec( q )
end

-- Sample update syntax
local q2 = [[UPDATE test SET FirstName="Trisha" WHERE UserID=3;]]
db:exec( q2 )

-- Sample delete syntax
local q3 = [[DELETE FROM test WHERE UserID=1;]]
db:exec( q3 )

-- Sample retrieve syntax

-- Create empty "people" table
local people = {}
 
-- Loop through database table rows via a SELECT query
for row in db:nrows( "SELECT * FROM test" ) do
 
    print( "Row:", row.UserID )
 
    -- Create sub-table at next available index of "people" table
    people[#people+1] =
    {
        FirstName = row.FirstName,
        LastName = row.LastName
    }
end

-- Close the database when finish using
if ( db and db:isopen() ) then
    db:close()
end

from: https://docs.coronalabs.com/tutorial/data/databaseAccess/index.html